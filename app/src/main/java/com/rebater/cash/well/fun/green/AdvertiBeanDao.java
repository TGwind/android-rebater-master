package com.rebater.cash.well.fun.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rebater.cash.well.fun.bean.AdvertiBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADVERTI_BEAN".
*/
public class AdvertiBeanDao extends AbstractDao<AdvertiBean, Long> {

    public static final String TABLENAME = "ADVERTI_BEAN";

    /**
     * Properties of entity AdvertiBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property AdId = new Property(2, int.class, "adId", false, "AD_ID");
        public final static Property IsUp = new Property(3, boolean.class, "isUp", false, "IS_UP");
        public final static Property CreateTime = new Property(4, long.class, "createTime", false, "CREATE_TIME");
        public final static Property ChangeTime = new Property(5, long.class, "changeTime", false, "CHANGE_TIME");
    }


    public AdvertiBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AdvertiBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADVERTI_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PACKAGE_NAME\" TEXT," + // 1: packageName
                "\"AD_ID\" INTEGER NOT NULL ," + // 2: adId
                "\"IS_UP\" INTEGER NOT NULL ," + // 3: isUp
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 4: createTime
                "\"CHANGE_TIME\" INTEGER NOT NULL );"); // 5: changeTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADVERTI_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdvertiBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
        stmt.bindLong(3, entity.getAdId());
        stmt.bindLong(4, entity.getIsUp() ? 1L: 0L);
        stmt.bindLong(5, entity.getCreateTime());
        stmt.bindLong(6, entity.getChangeTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdvertiBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
        stmt.bindLong(3, entity.getAdId());
        stmt.bindLong(4, entity.getIsUp() ? 1L: 0L);
        stmt.bindLong(5, entity.getCreateTime());
        stmt.bindLong(6, entity.getChangeTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AdvertiBean readEntity(Cursor cursor, int offset) {
        AdvertiBean entity = new AdvertiBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packageName
            cursor.getInt(offset + 2), // adId
            cursor.getShort(offset + 3) != 0, // isUp
            cursor.getLong(offset + 4), // createTime
            cursor.getLong(offset + 5) // changeTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdvertiBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAdId(cursor.getInt(offset + 2));
        entity.setIsUp(cursor.getShort(offset + 3) != 0);
        entity.setCreateTime(cursor.getLong(offset + 4));
        entity.setChangeTime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AdvertiBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AdvertiBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdvertiBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
